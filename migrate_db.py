#!/usr/bin/env python3
"""
Migrace datab√°ze pro p≈ôid√°n√≠ nov√©ho sloupce lsa_item_id do pallet_item tabulky
"""

import os
import sys
import sqlite3

# P≈ôid√°me aktu√°ln√≠ adres√°≈ô do Python cesty
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def migrate_database():
    """P≈ôid√° nov√Ω sloupec lsa_item_id do pallet_item tabulky"""
    db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'hueppe.db')
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Zkontroluj, zda sloupec ji≈æ existuje
        cursor.execute("PRAGMA table_info(pallet_item)")
        columns = [row[1] for row in cursor.fetchall()]
        
        if 'lsa_item_id' not in columns:
            print("P≈ôid√°v√°m sloupec lsa_item_id do pallet_item tabulky...")
            cursor.execute("ALTER TABLE pallet_item ADD COLUMN lsa_item_id INTEGER")
            print("‚úÖ Sloupec lsa_item_id byl √∫spƒõ≈°nƒõ p≈ôid√°n")
        else:
            print("‚úÖ Sloupec lsa_item_id ji≈æ existuje")
        
        # Zkontroluj tak√© zmƒõnu n√°zvu sloupce name -> pallet_text
        if 'name' in columns and 'pallet_text' not in columns:
            print("P≈ôejmenov√°n√≠ sloupce 'name' na 'pallet_text'...")
            
            # SQLite nepodporuje p≈ôejmenov√°n√≠ sloupc≈Ø p≈ô√≠mo
            # Mus√≠me vytvo≈ôit novou tabulku a p≈ôen√©st data
            cursor.execute("""
                CREATE TABLE pallet_item_new (
                    id INTEGER PRIMARY KEY,
                    order_id INTEGER NOT NULL,
                    lsa_item_id INTEGER,
                    date_received VARCHAR(64),
                    lsa_designation VARCHAR(64),
                    lsa VARCHAR(64),
                    pallet_text VARCHAR(255),
                    qty INTEGER DEFAULT 1,
                    weight FLOAT DEFAULT 0.0,
                    length_m FLOAT DEFAULT 0.0,
                    assigned_lane INTEGER DEFAULT 0,
                    import_order INTEGER DEFAULT 0,
                    loaded BOOLEAN DEFAULT 0,
                    FOREIGN KEY (order_id) REFERENCES order(id),
                    FOREIGN KEY (lsa_item_id) REFERENCES lsa_item(id)
                )
            """)
            
            # P≈ôen√©st existuj√≠c√≠ data
            cursor.execute("""
                INSERT INTO pallet_item_new (
                    id, order_id, date_received, lsa_designation, lsa, pallet_text,
                    qty, weight, length_m, assigned_lane, import_order, loaded
                )
                SELECT 
                    id, order_id, date_received, lsa_designation, lsa, name,
                    qty, weight, length_m, assigned_lane, import_order, loaded
                FROM pallet_item
            """)
            
            # Smazat starou tabulku a p≈ôejmenovat novou
            cursor.execute("DROP TABLE pallet_item")
            cursor.execute("ALTER TABLE pallet_item_new RENAME TO pallet_item")
            
            print("‚úÖ Sloupec 'name' byl p≈ôejmenov√°n na 'pallet_text'")
        
        elif 'pallet_text' not in columns:
            print("P≈ôid√°v√°m sloupec pallet_text...")
            cursor.execute("ALTER TABLE pallet_item ADD COLUMN pallet_text VARCHAR(255)")
            print("‚úÖ Sloupec pallet_text byl p≈ôid√°n")
        
        conn.commit()
        conn.close()
        
        print("üéâ Migrace datab√°ze byla √∫spƒõ≈°nƒõ dokonƒçena!")
        return True
        
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi migraci datab√°ze: {e}")
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        return False

if __name__ == "__main__":
    print("Spou≈°t√≠m migraci datab√°ze...")
    success = migrate_database()
    if success:
        print("‚ú® Datab√°ze je p≈ôipravena pro nov√Ω LSA syst√©m!")
    else:
        print("üí• Migrace se nezda≈ôila")
        sys.exit(1)